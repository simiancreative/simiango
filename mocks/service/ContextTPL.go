// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	service "github.com/simiancreative/simiango/service"
	mock "github.com/stretchr/testify/mock"
)

// ContextTPL is an autogenerated mock type for the ContextTPL type
type ContextTPL struct {
	mock.Mock
}

// Result provides a mock function with given fields: _a0
func (_m *ContextTPL) Result(_a0 service.Req) (interface{}, error) {
	ret := _m.Called(_a0)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(service.Req) interface{}); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(service.Req) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewContextTPL interface {
	mock.TestingT
	Cleanup(func())
}

// NewContextTPL creates a new instance of ContextTPL. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewContextTPL(t mockConstructorTestingTNewContextTPL) *ContextTPL {
	mock := &ContextTPL{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
